#!/usr/bin/env lua

require "blockGrid"
require "worldGen"

function pause ()
   print("\n(press ENTER to continue)\n")
   io.read()
end

math.randomseed(os.time())

print("\n")

print("--------------------------------------------------------------------------------")
print(" The following is a brief presentation that showcases several experimental")
print(" procedural world-generation algorithms.")
print(" It is recommended that your adjust your terminal to accommadate to a width of")
print(" 80 characters.")
print(" Although, it's possible that some visuals generated by the algorithms may")
print(" breach this limit, so don't be too suprised if something looks a bit off.")
print("--------------------------------------------------------------------------------")

pause()

print("The \"worlds\" that these algorithms will be")
print("assembling will be two-dimensional grids.")
print("These algorithms are meant to ultimately be a part of--or an example of")
print("what's meant be part of--a larger algorithm that will construct a larger")
print("two-dimensional \"world\" consisting of a variety of rooms connected")
print("by hallways.")

pause()

print("We will start by presenting two room generating algorithms.")
print("Both work by connecting randomly shaped rectangles (within")
print("a minimum and maximum width and height)")

pause()

print("This first one starts by placing a rectangle in the top left-hand corner of a")
print("grid, then adding a rectangle no further away than it's width and height.")
print("In other words, the second rectangle's x and y coordinates won't be the same as")
print("the first, but it won't move so far away that the rectangles aren't touching.")
print("Third, fourth, etc. rectangles are then added, connecting them to the previous")
print("rectangle in the same manner. And of course, a limit can be set as to how many")
print("rectangles--or rather, room-sections--are used to construct a room.")

pause()

print("Let's construct a few with this method.")
print("Note that each of these will be randomly generated on the")
print("spot, so the look of these will vary per presentation")
print("Also, in many cases, not all room-sections will be distinct.")
print("They may've been placed in a larger section or had the")
print("latter placed over them.")

pause()

print("2 sections:\n")
blockGrid.display(genRoom1(2))

pause()

print("4 sections:\n")
blockGrid.display(genRoom1(4))

pause()

print("8 sections:\n")
blockGrid.display(genRoom1(8))

pause()

print("With this algorithm, a whole world could be generated")
print("just by specifying a large number of room-sections.")

pause()

print("30 sections:\n")
blockGrid.display(genRoom1(30))

pause()

print("But, this can look a bit ugly.")
print("In fact, the grid that you just had displayed probably")
print("just ended up looking like a big blob.")
print("You'd probably want an algorithm that generates a more blocky looking room.")
print("This brings us to our next room generation algorithm.")

pause()

print("This second algorithm behaves much like the first one, adding on one rectangle")
print("onto another in succession until a room-section limit is reached.")
print("However, this method changes two things:")
print("1) The first rectangle doesn't start in the top right-hand corner.")
print("   Its position is rather arbitrary to begin with. The x and y coordinates")
print("   of the grid aren't chosen until all the room-sections are positioned.")
print("   This allows the room a little more freedom in developing its shape.")
print("2) Each room-section aligns one of its edges with")
print("   the previously placed room-section's.")
print("   You'll hopefully see how this gives us a more blocky form.")

pause()

print("2 sections:\n")
blockGrid.display(genRoom2(2))

pause()

print("3 sections:\n")
blockGrid.display(genRoom2(3))

pause()

print("4 sections:\n")
blockGrid.display(genRoom2(4))

pause()

print("5 sections:\n")
blockGrid.display(genRoom2(5))

pause()

print("Again, it might be possible to create a full world with this algorithm.")

pause()

print("30 sections:\n")
blockGrid.display(genRoom2(30))

pause()

print("But, again, this doesn't look that appealing.")
print("Well, maybe it does. It's all randomly generated after all.")
print("In general, though, this \"large room\" method of generating a world doesn't")
print("give us a pretty shape or the hallways that we (or at least, I) desire.")
print("Additionally, we don't have much control when it comes to its overall shape.")
print("For instance, if we wanted the room-sections to tend toward a circular")
print("orientation, we'd have no way of telling it to do so.")
print("This is where our next algorithm comes in.")

pause()

print("This algorithm is meant to generate something more akin")
print("to a complete world, rather than a single room.")
print("However, its more conceptual than the last two.")
print("For the sake of simplicity, each room in these resulting")
print("worlds are simple rectanges, and hallways are excluded.")
print("The main purpose of this algorithm is to demonstrate")
print("the idea of controlling the shape of a world.")
print("In this case, a circular world.")

pause()

print("8 rooms:\n")
blockGrid.display(genWorld(8, 8))

pause()

print("12 rooms:\n")
blockGrid.display(genWorld(12, 12))

pause()

print("16 rooms:\n")
blockGrid.display(genWorld(16, 16))

pause()

print("And for the sake of demonstration, if we only generate part of a circle...")

pause()

print("8 rooms:\n")
blockGrid.display(genWorld(8, 16))

pause()

print("16 rooms:\n")
blockGrid.display(genWorld(16, 32))

pause()

print("Essentially, a function is defined for the rise and run of a slope.")
print("The number of the room being placed is used as the input for these functions.")
print("The new room is then shifted away from the last room according to this slope.")
print("It's made sure that each new room, like the room-sections in the previous")
print("algorithms, doesn't overlap the last room too much, but doesn't move too")
print("far away from it either.")

pause()

print("Although the slope functions for this algorithm are hard-coded in, in theory,")
print("a map could be made to resemble any shape through this method.")
print("For example, it'd probably be quite easy to mimic a parabola or a sinsoidal function.")
print("Or, with a little more effort, maybe even a square or a triangle.")

pause()

print("Again, these all these algorithms are little")
print("more than experiments/demonstrations.")

pause()

print("--------------------------------------------------------------------------------")
print(" This concludes the presentation.")
print("--------------------------------------------------------------------------------")

print("\n")
